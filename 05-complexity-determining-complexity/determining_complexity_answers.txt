1. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.
```
def goodbye_world(n)
 puts "Goodbye World! #{n}"
end
```
  - The Big-O of that algorithm is O(1) because it would always execute in the same amount of time
  regardless of the input (n).

2. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.
```
def find_largest(collection)
 largest = collection[0]
 collection.length.times do |i|
   if collection[i] >= largest
     largest = collection[i]
   end
 end
 largest
end
```
  - The Big-O of that algorithm is O(n) because it's a linear search (it would have to go
  through all of the elements to determine which is the largest value in the collection).

3. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.
```
def find_largest(collection)
 largest = collection[0][0]
 collection.length.times do |i|
   subcollection = collection[i]
   subcollection.length.times do |j|
     if subcollection[j] >= largest
       largest = subcollection[j]
     end
   end
 end
 largest
end
```

  - The Big-O of that algorithm is O(n) because the search method is linear (even though it's traversing through a 2D array).

4. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.
```
def numbers(n)
 if (n == 0)
   return 0
 elsif (n == 1)
   return 1
 else
   return numbers(n-1) + numbers(n-2)
 end
end
```

  - The Big-O of that algorithm is O(n) because the recursion is linear.

5. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.
```
def iterative(n)
 num1 = 0
 num2 = 1

 i = 0
 while i < n-1
   tmp = num1 + num2
   num1 = num2
   num2 = tmp
   i+=1
 end

 num2
end
```

  - The Big-O of that algorithm is O(n) because the method iterates through `n` (so the time is correlated with `n`'s value).

6. What's the Big-O of the following algorithm? Submit your work and reasoning with your solution.
```
def sort(collection, from=0, to=nil)
 if to == nil
   # Sort the whole collection, by default
   to = collection.count - 1
 end

 if from >= to
   # Done sorting
   return
 end

 # Take a pivot value, at the far left
 pivot = collection[from]

 # Min and Max pointers
 min = from
 max = to

 # Current free slot
 free = min

 while min < max
   if free == min # Evaluate collection[max]
     if collection[max] <= pivot # Smaller than pivot, must move
       collection[free] = collection[max]
       min += 1
       free = max
     else
       max -= 1
     end
   elsif free == max # Evaluate collection[min]
     if collection[min] >= pivot # Bigger than pivot, must move
       collection[free] = collection[min]
       max -= 1
       free = min
     else
       min += 1
     end
   else
     raise "Inconsistent state"
   end
 end

 collection[free] = pivot

 sort collection, from, free - 1
 sort collection, free + 1, to

 collection
end
```

  - The Big-O of that algorithm is O(n^2) because the method uses quicksort.
